// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_1_GET_1
}

enum OrderStatus {
  PENDING_PAYMENT
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  profileImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Cart         Cart?
  Order        Order[]
}

model Product {
  id          Int  @id @default(autoincrement())
  name        String  @unique
  description String
  price       Float
  imageUrl    String
  categoryId  String?

  Category  Category?   @relation(fields: [categoryId], references: [id])
  Discount  Discount[]
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  imageURL    String
  description String?

  // Relations
  products Product[]
}

model Store {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  province    String
  zipCode     String
  country     String
  phoneNumber String
  email       String?
  latitude    Float
  longitude   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  discounts Discount[]
  Order     Order[]
}

model Discount {
  id               String       @id @default(uuid())
  name             String
  description      String?
  discountType     DiscountType
  value            Float
  minPurchase      Float?
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean      @default(true)
  productId        Int?
  storeId          String
  buyQuantity      Int? // For "buy X get Y" type promotions
  getQuantity      Int? // For "buy X get Y" type promotions
  maxDiscountValue Float? // Maximum discount value for percentage discounts
  createdAt        DateTime     @default(now())

  // Relations
  product Product? @relation(fields: [productId], references: [id])
  store   Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

/**
 * ------------------------------------ CART -----------------------------------
 */
model Cart {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/**
 * ------------------------------------ - -----------------------------------
 */

/**
 * ------------------------------------ ORDER -----------------------------------
 */
model Order {
  id               String        @id @default(uuid())
  userId           String
  orderNumber      String        @unique
  storeId          String
  addressId        String
  status           OrderStatus
  paymentMethod    String
  paymentStatus    PaymentStatus
  paymentProof     String?
  paymentProofTime DateTime?
  shippingMethod   String
  shippingCost     Float
  subtotal         Float
  discountTotal    Float         @default(0)
  total            Float
  notes            String?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  store Store       @relation(fields: [storeId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id             String   @id @default(uuid())
  orderId        String
  productId      Int
  quantity       Int
  price          Float
  discountAmount Float    @default(0)
  subtotal       Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

/**
 * ------------------------------------ - -----------------------------------
 */
