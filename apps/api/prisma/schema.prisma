// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

// Enum untuk Role User
enum Role {
  SUPER_ADMIN
  STORE_ADMIN
  CUSTOMER
}

enum Provider {
  GOOGLE
  EMAIL
}

// Enum untuk Tipe Diskon
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum VoucherType {
  PRODUCT_SPECIFIC
  TOTAL_PURCHASE
  SHIPPING
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_CONFIRMATION
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  Midtrans
  Manual
}

// enum PaymentStatus {
//   PENDING
//   PAID
//   FAILED
// }

// Tabel User
model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  emailConfirmed Boolean   @default(false)
  password       String?
  role           Role      @default(CUSTOMER)
  provider       Provider?
  userPhoto      String?
  address        String? //Buat model address
  referralCode   String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  Cart               Cart?
  Order              Order[]
  ConfirmToken       ConfirmToken[]
  ResetPasswordToken ResetPasswordToken[]
  Address            Address[]
  DiscountReport     DiscountReport[]
}

// Tabel ConfirmToken
model ConfirmToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id         Int     @id @default(autoincrement())
  userId     Int
  street     String
  city       String
  postalCode Int
  isDefault  Boolean
  latitude   Float
  longitude  Float

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * ------------------------------------ STORE -----------------------------------
 */

// Tabel Toko
model Store {
  id          Int      @id @default(autoincrement())
  name        String
  userId      Int
  address     String
  latitude    Float
  longitude   Float
  maxDistance Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Product     Product[]
  Stock       Stock[]
  Discount    Discount[]
  SalesReport SalesReport[] // Relasi balik ke SalesReport
  StockReport StockReport[] // Relasi balik ke StockReport
  Order       Order[]
  Voucher     Voucher[]
}

// Tabel Produk
model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  price       Float
  weight      Float
  categoryId  Int
  storeId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Category     Category       @relation(fields: [categoryId], references: [id])
  Store        Store          @relation(fields: [storeId], references: [id])
  Stock        Stock[]
  Discount     Discount[]
  SalesReport  SalesReport[] // Relasi balik ke SalesReport
  StockReport  StockReport[] // Relasi balik ke StockReport
  OrderItem    OrderItem[]
  ProductImage ProductImage[]
  Voucher      Voucher[]
  CartItem     CartItem[]
}

model ProductImage {
  id        Int    @id @default(autoincrement())
  productId Int
  imageUrl  String

  Product Product @relation(fields: [productId], references: [id])
}

// Tabel Kategori Produk
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Tabel Stok
model Stock {
  id        Int        @id @default(autoincrement())
  productId Int
  storeId   Int
  product   Product    @relation(fields: [productId], references: [id])
  store     Store      @relation(fields: [storeId], references: [id])
  quantity  Int
  stockLogs StockLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Tabel Log Perubahan Stok
model StockLog {
  id        Int      @id @default(autoincrement())
  stockId   Int
  stock     Stock    @relation(fields: [stockId], references: [id])
  change    Int // Perubahan stok (bisa positif atau negatif)
  reason    String // Alasan perubahan stok
  createdAt DateTime @default(now())
}

// Tabel Diskon
model Discount {
  id           Int          @id @default(autoincrement())
  productId    Int?
  storeId      Int?
  code         String // Kode diskon
  type         DiscountType // Tipe diskon: PERCENTAGE atau FIXED_AMOUNT
  value        Float // Nilai diskon (persentase atau nominal)
  minPurchase  Float? // Minimal pembelian untuk diskon
  buyOneGetOne Boolean      @default(false) // Diskon beli satu gratis satu
  maxDiscount  Decimal
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  Product        Product?         @relation(fields: [productId], references: [id])
  Store          Store?           @relation(fields: [storeId], references: [id])
  DiscountReport DiscountReport[]
}

model Voucher {
  id        Int         @id @default(autoincrement())
  code      String      @unique
  type      VoucherType
  value     Float
  productId Int?
  storeId   Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  Product Product? @relation(fields: [productId], references: [id])
  Store   Store    @relation(fields: [storeId], references: [id])
}

model DiscountReport {
  id        Int @id @default(autoincrement())
  userId    Int
  dicountId Int

  User     User     @relation(fields: [userId], references: [id])
  Discount Discount @relation(fields: [dicountId], references: [id])
}

// Tabel Laporan Penjualan
model SalesReport {
  id        Int      @id @default(autoincrement())
  storeId   Int
  productId Int
  store     Store    @relation(fields: [storeId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  Quantity  Int
  total     Float
  month     Int // Bulan laporan
  year      Int // Tahun laporan
  createdAt DateTime @default(now()) // Tanggal penjualan
}

// Tabel Laporan Stok
model StockReport {
  id           Int      @id @default(autoincrement())
  storeId      Int
  productId    Int
  Store        Store    @relation(fields: [storeId], references: [id])
  Product      Product  @relation(fields: [productId], references: [id])
  startStock   Int // Stok awal bulan
  endStock     Int // Stok akhir bulan
  totalAdded   Int // Total penambahan stok
  totalReduced Int // Total pengurangan stok
  month        Int // Bulan laporan
  year         Int // Tahun laporan
  createdAt    DateTime @default(now())
}

/**
 * ------------------------------------ CART -----------------------------------
 */
model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  totalPrice Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/**
 * ------------------------------------ ORDER -----------------------------------
 */
model Order {
  id               String      @id @default(uuid())
  userId           Int
  storeId          Int
  addressId        Int
  orderNumber      String      @unique
  orderStatus      OrderStatus
  paymentMethod    PaymentMethod
  // paymentStatus    PaymentStatus
  paymentProof     String?
  paymentProofTime DateTime?
  paymentDueDate   DateTime
  shippingMethod   String
  shippingCost     Float
  discountTotal    Float       @default(0)
  total            Float
  notes            String?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  User  User        @relation(fields: [userId], references: [id])
  Store Store       @relation(fields: [storeId], references: [id])
  OrderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  cartId    Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id])
  Cart    Cart    @relation(fields: [cartId], references: [id])
}
