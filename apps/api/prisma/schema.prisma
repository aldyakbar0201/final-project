// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

// Enum untuk Role User
enum Role {
  SUPER_ADMIN
  STORE_ADMIN
  CUSTOMER
}

// Enum untuk Tipe Diskon
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum OrderStatus {
  PENDING_PAYMENT
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  PAYMENT_GATEWAY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// Tabel User
model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  emailConfirmed Boolean        @default(false)
  password       String
  role           Role           @default(CUSTOMER)
  userPhoto      String?
  address        String?
  storeId        Int? // Hanya untuk STORE_ADMIN
  store          Store?         @relation(fields: [storeId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Cart           Cart?
  Order          Order[]
  ConfirmToken   ConfirmToken[]
}

// Tabel ConfirmToken
model ConfirmToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * ------------------------------------ STORE -----------------------------------
 */

// Tabel Toko
model Store {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  users        User[]
  products     Product[]
  stocks       Stock[]
  discounts    Discount[]
  salesReports SalesReport[] // Relasi balik ke SalesReport
  stockReports StockReport[] // Relasi balik ke StockReport
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Order        Order[]
}

// Tabel Produk
model Product {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String
  price        Float
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  storeId      Int
  store        Store         @relation(fields: [storeId], references: [id])
  images       String[] // Array URL gambar
  stocks       Stock[]
  discounts    Discount[]
  salesReports SalesReport[] // Relasi balik ke SalesReport
  stockReports StockReport[] // Relasi balik ke StockReport
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  CartItem     CartItem[]
  OrderItem    OrderItem[]
}

// Tabel Kategori Produk
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Tabel Stok
model Stock {
  id        Int        @id @default(autoincrement())
  productId Int
  product   Product    @relation(fields: [productId], references: [id])
  storeId   Int
  store     Store      @relation(fields: [storeId], references: [id])
  quantity  Int
  stockLogs StockLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Tabel Log Perubahan Stok
model StockLog {
  id        Int      @id @default(autoincrement())
  stockId   Int
  stock     Stock    @relation(fields: [stockId], references: [id])
  change    Int // Perubahan stok (bisa positif atau negatif)
  reason    String // Alasan perubahan stok
  createdAt DateTime @default(now())
}

// Tabel Diskon
model Discount {
  id           Int          @id @default(autoincrement())
  productId    Int
  product      Product      @relation(fields: [productId], references: [id])
  storeId      Int
  store        Store        @relation(fields: [storeId], references: [id])
  type         DiscountType // Tipe diskon: PERCENTAGE atau FIXED_AMOUNT
  value        Float // Nilai diskon (persentase atau nominal)
  minPurchase  Float? // Minimal pembelian untuk diskon
  buyOneGetOne Boolean      @default(false) // Diskon beli satu gratis satu
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Tabel Laporan Penjualan
model SalesReport {
  id        Int      @id @default(autoincrement())
  storeId   Int
  store     Store    @relation(fields: [storeId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  total     Float
  date      DateTime // Tanggal penjualan
  createdAt DateTime @default(now())
}

// Tabel Laporan Stok
model StockReport {
  id           Int      @id @default(autoincrement())
  storeId      Int
  store        Store    @relation(fields: [storeId], references: [id])
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  startStock   Int // Stok awal bulan
  endStock     Int // Stok akhir bulan
  totalAdded   Int // Total penambahan stok
  totalReduced Int // Total pengurangan stok
  month        Int // Bulan laporan
  year         Int // Tahun laporan
  createdAt    DateTime @default(now())
}

/**
 * ------------------------------------ CART -----------------------------------
 */
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/**
 * ------------------------------------ - -----------------------------------
 */

/**
 * ------------------------------------ ORDER -----------------------------------
 */
model Order {
  id               String        @id @default(uuid())
  userId           Int
  storeId          Int
  orderNumber      String        @unique
  addressId        String
  status           OrderStatus
  paymentMethod    String
  paymentStatus    PaymentStatus
  paymentProof     String?
  paymentProofTime DateTime?
  shippingMethod   String
  shippingCost     Float
  subtotal         Float
  discountTotal    Float         @default(0)
  total            Float
  notes            String?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  store Store       @relation(fields: [storeId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id             String   @id @default(uuid())
  orderId        String
  productId      Int
  quantity       Int
  price          Float
  discountAmount Float    @default(0)
  subtotal       Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

/**
 * ------------------------------------ - -----------------------------------
 */
